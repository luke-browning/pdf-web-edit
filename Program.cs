using Microsoft.OpenApi.Models;
using PDFWebEdit.Models;
using PDFWebEdit.Services;
using System.Reflection;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllersWithViews();

builder.Services.AddSwaggerGen(options =>
{
    // Locate the XML file being generated by ASP.NET...
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

    // ... and tell Swagger to use those XML comments.
    options.IncludeXmlComments(xmlPath);

    options.SwaggerDoc("V1", new OpenApiInfo
    {
        Version = "V1",
        Title = "PDF Web Edit API",
        Description = "PDF Web Edit API for manipulating PDF files"
    });
});

builder.Services.AddSignalR();
builder.Services.AddSingleton<DocNetSingleton>();
builder.Services.AddSingleton<ConfigService>();
builder.Services.AddSingleton<DirectoryService>();

builder.Services.AddTransient<IPDFService, DocNetPDFService>();
builder.Services.AddTransient<IPDFManipulationService, iTextPDFManipulationService>();

builder.Services.AddHostedService<FileInputMonitorService>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(options =>
    {
        options.DefaultModelsExpandDepth(-1);
        options.SwaggerEndpoint("/swagger/V1/swagger.json", "V1");
    });
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller}/{action=Index}/{id?}");
app.UseEndpoints(endpoints => {
    endpoints.MapHub<EventHub>("/api/events");
});
app.MapFallbackToFile("index.html");

app.Run();
